---

- name: Restrict to specifc groups
  when: item.inventory_groups is undefined or group_names | intersect(item.inventory_groups) | length > 0
  block:

    - name: Create all groups
      ansible.builtin.group:
        state: present
        name: "{{ item.name }}"
        gid: "{{ item.gid | default(omit) }}"
      loop: "{{ grps }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create all users
      ansible.builtin.user:
        name: "{{ item.name }}"
        uid: "{{ item.uid | default(omit) }}"
        group: "{{ item.group | default(omit) }}"
        groups: "{{ item.groups | default(omit) }}"
        home: "{{ item.home | default(omit) }}"
        password: >-
          {%- if item.password | default('') | regex_search('^\$') -%}
          {{ item.password }}
          {%- elif item.password | default('') | length > 0 -%}
          {{ item.password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}
          {%- else -%}
          omit
          {%- endif -%}
        update_password: "{{ item.update_password | default(update_password) | default('on_create') }}"
        shell: "{{ item.shell | default('/bin/bash') }}"
        comment: "{{ item.fullname | default(omit) }}"
        append: "{{ true if item.groups is defined else omit }}"
      register: __user_create
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Make user change password at next login
      ansible.builtin.command:
        cmd: chage -d 0 {{ item.item.name }}
      changed_when: true
      when:
        - item.changed
        - item.item.password_change_at_login | default(False) | bool
      loop: "{{ __user_create.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Disable password expiration
      ansible.builtin.command:
        cmd: chage -I -1 -m 0 -M -1 -E -1 {{ item.name }}
      changed_when: true
      when: item.disable_password_expiration | default(false) | bool
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Add public keys to alls users
      ansible.builtin.include_tasks: authorized_keys.yml
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Setup password less sudo
      ansible.builtin.template:
        src: sudo-nopasswd.j2
        dest: "/etc/sudoers.d/u_{{ item.name }}"
        owner: root
        group: root
        mode: '0440'
      when:
        - item.sudo is defined and item.sudo
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.name }}"
